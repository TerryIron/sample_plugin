#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2015-2018  Terry Xi
# All Rights Reserved.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


import sys
import json
import os.path
import commands


def pack_platform(**kwargs):
    commands.getoutput('git checkout master')
    _name = kwargs['name']
    print 'Archive Platform {}'.format(_name)
    commands.getoutput('rm -rf ./target/{}/.git'.format(_name))
    print commands.getoutput('find ./target/{}'.format(_name))
    commands.getoutput('cd ./target && zip -r ./{0}.zip {0} && rm -rf {0} && cd -'.format(_name))


def process_platform(**kwargs):
    _name = kwargs['name']
    _url = kwargs['repo']
    _branch = kwargs.get('branch', 'master')
    commands.getoutput('git checkout {}'.format(_branch))
    print 'Pack Platform {}'.format(_name)
    commands.getoutput('git clone {} ./target/{}'.format(_url, _name))
    if 'tag' in kwargs:
        commands.getoutput('cd ./target/{0} && git checkout {1} && cd -'.format(_name, kwargs['tag']))
    else:
        commands.getoutput('cd ./target/{0} && git checkout {1} && cd -'.format(_name, _branch))
    if 'plugin_dir' in kwargs:
        return _name + '/' + kwargs['plugin_dir']


def process_plugin(key, value, remote=None, plugin_path=None):
    if remote:
        _output = commands.getoutput('git branch -a | grep remotes | grep plugin_ | grep {}| grep {}'.format(key, value))
    else:
        _output = commands.getoutput('git tag | grep plugin_ | grep {} | grep {}'.format(key, value))
    if _output:
        _output = _output.split('/')[-1]
        print 'Pack Plugin {} Ver:{}'.format(key, value)
        if plugin_path is not None:
            if not os.path.exists('./target/{}'.format(plugin_path)):
                raise Exception('Platform plugin_dir not found, {}'.format(plugin_path))
            print commands.getoutput('git checkout {} && ./pack_plugin && cp ./target/{}.zip ./target/{}'.format(_output, key, plugin_path))
        else:
            print commands.getoutput('git checkout {} && ./pack_plugin'.format(_output))


def main():
    _config_path = sys.argv[1]
    f = open(_config_path)
    _dict = json.loads(f.read())
    _platform_dict = None
    _plugin_path = None
    if 'platform' in _dict:
        _platform_dict = _dict.pop('platform')
        _plugin_path = process_platform(**_platform_dict)

    if 'remote' not in _dict:
        _remote = None
    else:
        _remote = _dict.pop('remote')
        if not _remote:
            _remote = 'origin'

    for k, v in _dict.items():
        process_plugin(k, v, remote=_remote, plugin_path=_plugin_path)

    if _platform_dict:
        pack_platform(**_platform_dict)
    commands.getoutput('git checkout master')


if __name__ == '__main__':
    main()
