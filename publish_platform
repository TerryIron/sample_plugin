#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2015-2018  Terry Xi
# All Rights Reserved.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


import sys
import json
import os.path
import commands


def pack_platform(**kwargs):
    commands.getoutput('git checkout master')
    _name = kwargs['name']
    if _name:
        print 'Archive Platform {}'.format(_name)
        commands.getoutput('rm -rf ./target/{}/.git'.format(_name))
        # commands.getoutput('find ./target/{}'.format(_name))
        commands.getoutput('cd ./target && zip -r ./{0}.zip {0} && rm -rf {0} && cd -'.format(_name))


def process_plugin(key, value, remote=None, plugin_path=None, path='.', target_path=None):
    if remote:
        _output = commands.getoutput('cd {} && git branch -a | grep remotes '
                                     '| grep plugin_ | grep {}| grep {}'.format(path, key, value))
    else:
        _output = commands.getoutput('cd {} && git tag | grep plugin_ | grep {} | grep {}'.format(path, key, value))
    if _output:
        _output = _output.split('/')[-1]
        print 'Pack Plugin {} Ver:{}'.format(key, value)
        if plugin_path is not None:
            if not os.path.exists('./target/{}'.format(plugin_path)):
                raise Exception('Platform plugin_dir not found, {}'.format(plugin_path))
            if key and plugin_path:
                commands.getoutput('cd {} && git checkout {} && git pull {} {} && ./pack_plugin'.format(path, _output,
                                                                                                        remote, _output))
                if not target_path:
                    target_path = './target/{}'.format(plugin_path)
                print 'cp {}/target/{}.zip {}'.format(path, key, target_path)
                commands.getoutput('cd {path}/target && unzip {name}.zip '
                                   '&& zip -r {name}.zip {name} && rm -rf {name}'.format(path=path, name=key))
                commands.getoutput('mkdir -p {}'.format(target_path))
                print commands.getoutput('cp {}/target/{}.zip {}'.format(path, key, target_path))
        else:
            commands.getoutput('cd {} && git checkout {} && git pull {} {} && ./pack_plugin'.format(path, _output,
                                                                                                    remote, _output))


def process_platform(**kwargs):
    _name = kwargs['name']
    _url = kwargs['repo']
    _branch = kwargs.get('branch', 'master')
    commands.getoutput('git checkout {}'.format(_branch))
    print 'Pack Platform {}'.format(_name)
    commands.getoutput('git clone {} ./target/{}'.format(_url, _name))
    if 'tag' in kwargs:
        commands.getoutput('cd ./target/{0} && git checkout {1} && cd -'.format(_name, kwargs['tag']))
    else:
        commands.getoutput('cd ./target/{0} && git checkout {1} && cd -'.format(_name, _branch))
    if 'plugin_dir' in kwargs:
        if 'plugin_repo' in kwargs and 'plugins' in kwargs:
            process_platform_plugin(**kwargs)
        return _name + '/' + kwargs['plugin_dir']


def platform_init_ready(**kwargs):
    _target_path = './target/{}'.format(kwargs['name'])
    _target_init = kwargs['init']
    _target_url = _target_init['repo']
    import urlparse
    import os.path
    _target_name = os.path.basename(urlparse.urlparse(_target_url).path).split('.')[0]
    _target_items = _target_init['pull']
    commands.getoutput('git clone {} ./target/{}'.format(_target_url, _target_name))
    _target_name = './target/{}'.format(_target_name)
    for k, v in _target_items.items():
        _k_path = os.path.join(_target_path, k)
        _v_dir = '/'.join(v.split('/')[:-1])
        if os.path.exists(_k_path):
            if _v_dir:
                commands.getoutput('mkdir -p {}/{}'.format(_target_path, _v_dir))
            commands.getoutput('cp -rf {}/{} {}/{}'.format(_target_name, _k_path, _target_path, v))


def process_platform_plugin(**kwargs):
    _name = kwargs['name']
    _url = kwargs['plugin_repo']
    _plugin_path = kwargs['plugin_dir']
    print 'Pack Platform Plugin {}'.format(_name)
    _platform_plugin_git = './target/{}_{}'.format(_name, 'plugin')
    commands.getoutput('git clone {} {}'.format(_url, _platform_plugin_git))
    _platform_plugin_path = _name + '/' + kwargs['plugin_dir']
    _plugin_name = None
    _plugin_dir = None
    if 'plugin_name' in kwargs['plugins'] and 'plugin_dir' in kwargs['plugins']:
        _plugin_name = kwargs['plugins'].pop('plugin_name')
        _plugin_dir = kwargs['plugins'].pop('plugin_dir')
        commands.getoutput('unzip ./target/{}.zip -d ./target'.format(_plugin_name))
    for k, v in kwargs['plugins'].items():
        if _plugin_name and _plugin_dir:
            process_plugin(k, v, 'origin',
                           _platform_plugin_path, _platform_plugin_git,
                           './target/' + _plugin_name + '/' + _plugin_dir)
        else:
            process_plugin(k, v, 'origin',
                           _platform_plugin_path, _platform_plugin_git)
    commands.getoutput('rm -rf {}'.format(_platform_plugin_git))


def main():
    _config_path = sys.argv[1]
    f = open(_config_path)
    _dict = json.loads(f.read())
    _platform_dict = None
    _plugin_path = None
    if 'platform' in _dict:
        _platform_dict = _dict.pop('platform')
        _plugin_path = process_platform(**_platform_dict)
        if 'init' in _platform_dict:
            platform_init_ready(**_platform_dict)

    if 'remote' not in _dict:
        _remote = 'origin'
    else:
        _remote = _dict.pop('remote')
        if not _remote:
            _remote = 'origin'

    for k, v in _dict.items():
        process_plugin(k, v, remote=_remote, plugin_path=_plugin_path)

    if _platform_dict:
        pack_platform(**_platform_dict)
    commands.getoutput('git checkout master')


if __name__ == '__main__':
    main()
